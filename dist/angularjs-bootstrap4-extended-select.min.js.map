{"version":3,"sources":["webpack://extendedSelect/webpack/universalModuleDefinition","webpack://extendedSelect/external \"angular\"","webpack://extendedSelect/external \"angularjs-bootstrap-4\"","webpack://extendedSelect/webpack/bootstrap","webpack://extendedSelect/webpack/runtime/compat get default export","webpack://extendedSelect/webpack/runtime/define property getters","webpack://extendedSelect/webpack/runtime/hasOwnProperty shorthand","webpack://extendedSelect/./.build/src/ts/lib/service/extended-select-options.service.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select.component.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select-mark-result.component.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select-option-group.component.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select-options.directive.ts","webpack://extendedSelect/./src/ts/lib/extended-select.module.ts","webpack://extendedSelect/../src/ts/angularjs-bootstrap4-extended-select.ts","webpack://extendedSelect/./src/ts/lib/extended-select.provider.ts","webpack://extendedSelect/./src/ts/lib/extended-select.config.ts","webpack://extendedSelect/./.build/src/ts/lib/component/es-transclude.directive.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select-search.directive.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__734__","__WEBPACK_EXTERNAL_MODULE__635__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","NG_OPTIONS_REGEXP","ExtendedSelectComponentController","$element","$attrs","$scope","$timeout","$transclude","extendedSelectOptions","extendedSelect","options","optionsFiltered","activeIndex","search","_searchTimeout","_transcludedOptions","this","_ngOptions","parseNgOptions","multiple","placeholder","placeholderMultiple","deselectable","length","addOptionLang","loadMoreResultsLang","typeToSearchText","typeToSearch","searchByValue","ngModelCtrl","$isEmpty","value","clone","optionElement","push","label","textContent","$observe","isDisabled","isReadonly","isSmall","hasClass","isLarge","optionObjects","valuesFn","$parent","_optionObjects","updateOptions","groups","groupsTree","addGroup","groupName","parentGroup","groupItem","find","item","name","children","pickLater","forEach","optionObject","locals","getLocals","groupByFn","nestedByFn","valueFn","displayFn","group","_addOptionCalled","parent","parentChildren","subItem","order","walkTree","branch","level","sort","b","indexOf","pickOption","filterData","wasOpen","isOpen","$setTouched","some","option","i","isSelected","newValue","removeValue","sorted","includes","ngModel","toLowerCase","page","hasNextPage","resolveOnSearch","timeout","_lastSearchValue","cancel","loading","response","_updateMultipleModel","$setViewValue","deselectValue","addOption","extendedSelectComponent","bindings","transclude","beforeOption","optionTemplate","template","controllerAs","controller","extendedSelectMarkResultComponent","_search","_update","html","replace","RegExp","extendedSelectOptionGroupComponent","prevGroup","commonAncestor","getUntilLevel","unshift","ExtendedSelectOptionsDirectiveController","angularBS","querySelector","top","offsetTop","scroll","scrollTop","bot","offset","height","ulHeight","$provide","directiveName","decorator","$delegate","directive","compile_","compile","element","attrs","tagName","apply","link","terminal","$parse","ngOptionsString","match","valueName","keyName","restrict","scope","ctrl","slot","isSlotFilled","transcludedScope","$extendedSelect","$option","$isOption","getModelLabel","$watch","contents","replaceWith","prepend","bindToController","$injector","has","focus","on","e","stopPropagation","which","addOptionAction","$apply","originalIndex","$digest"],"mappings":"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","file":"angularjs-bootstrap4-extended-select.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"angularjs-bootstrap-4\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angularjs-bootstrap4-extended-select\", [\"angular\", \"angularjs-bootstrap-4\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angularjs-bootstrap4-extended-select\"] = factory(require(\"angular\"), require(\"angularjs-bootstrap-4\"));\n\telse\n\t\troot[\"angularjs-bootstrap4-extended-select\"] = factory(root[\"angular\"], root[\"angularjs-bootstrap-4\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__734__, __WEBPACK_EXTERNAL_MODULE__635__) {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__734__;","module.exports = __WEBPACK_EXTERNAL_MODULE__635__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {ICompiledExpression, IParseService} from 'angular';\n\n/**\n * Parse ng-options in angular way.\n * 1: value expression (valueFn)\n * 2: label expression (displayFn)\n * 3: group by expression (groupByFn)\n * 4: nested by expression (nestedByFn)\n * 5: disable when expression (disableWhenFn)\n * 6: array item variable name\n * 7: object item key variable name\n * 8: object item value variable name\n * 9: collection expression\n * 10: track by expression\n * @type {RegExp}\n */\n// eslint-disable-next-line max-len\nconst NG_OPTIONS_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?)(?:\\s+nested\\s+by\\s+([\\s\\S]+?))?)?(?:\\s+disable\\s+when\\s+([\\s\\S]+?))?\\s+for\\s+(?:([$\\w][$\\w]*)|(?:\\(\\s*([$\\w][$\\w]*)\\s*,\\s*([$\\w][$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/;\n\nexport interface IParsedNgOptions {\n    valueFn: ICompiledExpression,\n    displayFn: ICompiledExpression,\n    groupByFn: ICompiledExpression,\n    nestedByFn: ICompiledExpression,\n    valuesFn: ICompiledExpression,\n    getLocals: (key: unknown, value: unknown) => Record<string, unknown>\n}\n\nexport class ExtendedSelectOptionsService {\n    constructor(\n        private $parse: IParseService\n    ) {\n    }\n\n    parseNgOptions(ngOptionsString: string): IParsedNgOptions {\n        const match = ngOptionsString.match(NG_OPTIONS_REGEXP);\n        if (match === null) {\n            return null;\n        }\n        const valueName = match[6] || match[8],\n            keyName = match[7];\n        return {\n            valueFn: this.$parse(match[2] ? match[1] : valueName),\n            displayFn: this.$parse(match[2] || match[1]),\n            groupByFn: this.$parse(match[3] || ''),\n            nestedByFn: this.$parse(match[4] || ''),\n            valuesFn: this.$parse(match[9]),\n            getLocals: (key, value) => {\n                const locals = {};\n                locals[valueName] = value;\n                if (keyName) {\n                    locals[keyName] = key;\n                }\n                return locals;\n            }\n        };\n    }\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {\n    IAttributes,\n    IComponentOptions,\n    INgModelController,\n    IPromise,\n    IScope,\n    ITimeoutService,\n    ITranscludeFunction\n} from 'angular';\nimport {ExtendedSelectOptionsService, IParsedNgOptions} from '../service/extended-select-options.service';\nimport {IExtendedSelectOptions} from '../extended-select.provider';\nimport * as angular from 'angular';\n\nexport interface IGroupItem {\n    name: string,\n    parentGroup: string,\n    children: IGroupItem[],\n    level?: number,\n    parent?: IGroupItem\n}\n\nexport interface IExtendedSelectOption {\n    value: unknown,\n    label: string,\n    group?: IGroupItem\n}\n\n/**\n * @ngInject\n */\nexport class ExtendedSelectComponentController {\n    // bindings\n    ngModel: unknown | unknown[];\n    addOption: (locals: { value: string }) => void;\n    resolveOnSearch: (locals: { value: string, page: number }) => IPromise<{ hasNextPage?: boolean }>;\n    deselectable: boolean;\n    deselectValue: unknown;\n    typeToSearch: number;\n    searchByValue: boolean;\n    ngModelCtrl: INgModelController;\n    //\n    options: IExtendedSelectOption[] = [];\n    optionsFiltered: IExtendedSelectOption[] = [];\n    activeIndex = -1;\n    search = '';\n    multiple: boolean;\n    addOptionLang: string;\n    loadMoreResultsLang: string;\n    typeToSearchText: string;\n    placeholder: string;\n    isDisabled: boolean;\n    isReadonly: boolean;\n    isSmall: boolean;\n    isLarge: boolean;\n    isOpen: boolean;\n    hasNextPage: boolean;\n    page: number;\n    loading: boolean;\n    private _ngOptions: IParsedNgOptions;\n    private _searchTimeout = null;\n    private _optionObjects: Record<string, unknown>[];\n    private _addOptionCalled: boolean;\n    private _lastSearchValue: string;\n    private _transcludedOptions: IExtendedSelectOption[] = [];\n\n    constructor(\n        private $element: JQLite,\n        private $attrs: IAttributes,\n        private $scope: IScope,\n        private $timeout: ITimeoutService,\n        private $transclude: ITranscludeFunction,\n        private extendedSelectOptions: ExtendedSelectOptionsService,\n        private extendedSelect: IExtendedSelectOptions\n    ) {\n        this._ngOptions = 'ngOptions' in $attrs\n            ? extendedSelectOptions.parseNgOptions($attrs['ngOptions']) : null;\n        this.multiple = 'multiple' in this.$attrs;\n        this.placeholder = 'multiple' in this.$attrs\n            ? this.extendedSelect.placeholderMultiple : this.extendedSelect.placeholder;\n    }\n\n    $onInit(): void {\n        if (!this.deselectable && 'deselectable' in this.$attrs && !this.$attrs.deselectable.length) {\n            this.deselectable = true;\n        }\n\n        this.addOptionLang = this.extendedSelect.addOptionLang;\n        this.loadMoreResultsLang = this.extendedSelect.loadMoreResultsLang;\n        this.typeToSearchText = this.extendedSelect.typeToSearchText;\n\n        if (angular.isUndefined(this.typeToSearch)) {\n            this.typeToSearch = this.extendedSelect.typeToSearch;\n        }\n        if (angular.isUndefined(this.searchByValue)) {\n            this.searchByValue = this.extendedSelect.searchByValue;\n        }\n        if (this.multiple) {\n            this.ngModelCtrl.$isEmpty = function(value) {\n                return !value || value.length === 0;\n            };\n        }\n        this._transcludedOptions = [];\n        this.$transclude((clone) => {\n            angular.forEach(clone, (optionElement: HTMLOptionElement) => {\n                this._transcludedOptions.push({\n                    value: optionElement.value,\n                    label: optionElement.textContent\n                });\n            });\n        }, null, 'option');\n        //\n        this.$attrs.$observe('placeholder', (value) => {\n            this.placeholder = value as string;\n        });\n        this.$attrs.$observe('disabled', (value) => {\n            this.isDisabled = value === true || angular.isString(value);\n        });\n        this.$attrs.$observe('readonly', (value) => {\n            this.isReadonly = value === true || angular.isString(value);\n        });\n    }\n\n    $doCheck(): void {\n        this.isSmall = this.$element.hasClass('custom-select-sm');\n        this.isLarge = this.$element.hasClass('custom-select-lg');\n        if (this._ngOptions !== null) {\n            const optionObjects = this._ngOptions.valuesFn(this.$scope.$parent);\n            if (angular.isDefined(optionObjects) && !angular.equals(optionObjects, this._optionObjects)) {\n                this._optionObjects = angular.copy(optionObjects);\n                this.updateOptions(optionObjects);\n            }\n        }\n    }\n\n    updateOptions(optionObjects: Record<string, unknown>[]): void {\n        const options = angular.copy(this._transcludedOptions),\n            groups = [],\n            groupsTree = [],\n            addGroup = (groupName: string, parentGroup?: string) => {\n                if (angular.isDefined(parentGroup)) {\n                    addGroup(parentGroup);\n                }\n                let groupItem = groups.find((item) => {\n                    return item.name === groupName;\n                });\n\n                if (angular.isUndefined(groupItem)) {\n                    groupItem = {\n                        name: groupName,\n                        parentGroup,\n                        children: []\n                    };\n                    groups.push(groupItem);\n                } else if (angular.isDefined(parentGroup) && groupItem.parentGroup !== parentGroup) {\n                    groupItem.parentGroup = parentGroup;\n                }\n\n                return groupItem;\n            };\n        let pickLater;\n\n        optionObjects.forEach((optionObject, key) => {\n            const locals = this._ngOptions.getLocals(key, optionObject),\n                groupName = this._ngOptions.groupByFn(this.$scope.$parent, locals),\n                parentGroup = this._ngOptions.nestedByFn(this.$scope.$parent, locals);\n\n            options.push({\n                value: this._ngOptions.valueFn(this.$scope.$parent, locals),\n                label: this._ngOptions.displayFn(this.$scope.$parent, locals),\n                group: angular.isDefined(groupName) ? addGroup(groupName, parentGroup) : undefined\n            });\n\n            if (this._addOptionCalled && options[options.length - 1].label === this.search) {\n                pickLater = options[options.length - 1];\n                this._addOptionCalled = false;\n            }\n        });\n\n        if (groups.length) {\n            groups.forEach((item) => {\n                let parent, parentChildren;\n                if (angular.isUndefined(item.parentGroup)) {\n                    parentChildren = groupsTree;\n                } else {\n                    parent = groups.find((subItem) => {\n                        return subItem.name === item.parentGroup;\n                    });\n                    parentChildren = parent.children;\n                }\n                item.parent = parent;\n                parentChildren.push(item);\n            });\n            const order = [],\n                walkTree = (branch: IGroupItem[], level = 0) => {\n                    branch.forEach((item) => {\n                        order.push(item.name);\n                        item.level = level;\n                        walkTree(item.children, level + 1);\n                    });\n                }\n            walkTree(groupsTree);\n            options.sort((a, b) => {\n                return order.indexOf(a.group.name) - order.indexOf(b.group.name);\n            });\n        }\n\n        this.options = options;\n        if (pickLater) {\n            // in multiple mode, we need to wait until new option is added to this.options\n            // before selecting it\n            this.pickOption(pickLater);\n        }\n        this.filterData();\n    }\n\n    open(): void {\n        const wasOpen = this.isOpen;\n        this.ngModelCtrl.$setTouched();\n        if (this.isDisabled || this.isReadonly) {\n            this.isOpen = false;\n        } else {\n            this.isOpen = this.multiple ? true : !this.isOpen;\n        }\n        if (!wasOpen && this.isOpen) {\n            this.search = '';\n            // reset active index\n            this.activeIndex = -1;\n            this.options.some((option, i) => {\n                if (this.isSelected(option)) {\n                    this.activeIndex = i;\n                    if (!this.multiple) {\n                        return true; // break;\n                    }\n                }\n            });\n            this.filterData();\n        }\n    }\n\n    _updateMultipleModel(newValue: unknown, removeValue?: unknown): void {\n        // sort selected options, so we get same result as in select element.\n        const sorted = [];\n        this.options.forEach((option) => {\n            if (\n                (\n                    this.isSelected(option)\n                    || angular.equals(option.value, newValue)\n                )\n                && !angular.equals(option.value, removeValue)\n                && !sorted.includes(option.value)\n            ) {\n                sorted.push(option.value);\n            }\n        });\n        if (!angular.equals(this.ngModel, sorted)) {\n            this.ngModel = sorted;\n        }\n    }\n\n    filterData(): void {\n        if (angular.isUndefined(this.search)) {\n            angular.copy(this.options, this.optionsFiltered);\n            return;\n        }\n        angular.copy([], this.optionsFiltered);\n        if (this.search.length < this.typeToSearch) {\n            return;\n        }\n        const search = this.search.toLowerCase();\n        this.options.forEach((option) => {\n            if (\n                option.label.toLowerCase().includes(search)\n                || (\n                    this.searchByValue\n                    && (\n                        (\n                            angular.isString(option.value)\n                            && option.value.toLowerCase().includes(search)\n                        )\n                        || (\n                            angular.isObject(option.value)\n                            && angular.toJson(option.value).toLowerCase().includes(search)\n                        )\n                    )\n                )\n            ) {\n                this.optionsFiltered.push(option);\n            }\n        });\n    }\n\n    isSelected(option: IExtendedSelectOption): boolean {\n        if (angular.isUndefined(this.ngModel)) {\n            return false;\n        }\n        if (this.multiple) {\n            return (this.ngModel as unknown[]).includes(option.value);\n        }\n        return angular.equals(option.value, this.ngModel);\n    }\n\n    getModelLabel(value?: unknown): string {\n        if (angular.isUndefined(value)) {\n            value = this.ngModel;\n        }\n        const option = this.options.find((option) => {\n            return angular.equals(option.value, value);\n        });\n        return option ? option.label : '';\n    }\n\n    searchFn(page?: number): void {\n        if (angular.isUndefined(page)) {\n            this.activeIndex = this.options.length ? 0 : -1;\n        }\n        this.hasNextPage = false;\n        this.filterData();\n        if (angular.isFunction(this.resolveOnSearch)) {\n            this.page = page || 1;\n            if (angular.isDefined(this.search) && this.search.length) {\n                const timeout = angular.isUndefined(this._lastSearchValue) ? 0 : 750;\n                if (this._searchTimeout !== null) {\n                    this.$timeout.cancel(this._searchTimeout);\n                }\n                this._lastSearchValue = this.search;\n                this.loading = true;\n                this._searchTimeout = this.$timeout(() => {\n                    this._searchTimeout = null;\n                    this.resolveOnSearch({value: this.search, page: this.page})\n                        .then((response) => {\n                            this._lastSearchValue = undefined;\n                            this.loading = false;\n                            this.hasNextPage = response && !!response.hasNextPage;\n                            this.filterData();\n                        }).catch(angular.noop);\n                }, timeout);\n            }\n        }\n    }\n\n    pickOption(option: IExtendedSelectOption): void {\n        if (this.multiple) {\n            if (angular.isUndefined(this.ngModel)) {\n                this.ngModel = [];\n            }\n            if (!(this.ngModel as unknown[]).includes(option.value)) {\n                this._updateMultipleModel(option.value);\n            }\n            this.activeIndex = -1;\n            this.search = '';\n        } else {\n            this.isOpen = false;\n            this.ngModel = option.value;\n            this.activeIndex = this.options.indexOf(option);\n        }\n        this.hasNextPage = false;\n        this.ngModelCtrl.$setViewValue(this.ngModel);\n    }\n\n    deselect(value: unknown): void {\n        if (this.multiple) {\n            this._updateMultipleModel(undefined, value);\n        } else {\n            this.ngModel = this.deselectValue;\n        }\n        this.activeIndex = -1;\n        this.ngModelCtrl.$setViewValue(this.ngModel);\n    }\n\n    addOptionAction(): void {\n        if (angular.isFunction(this.addOption) && this.search.length) {\n            const option = this.options.find((option) => {\n                return option.label === this.search;\n            });\n            if (option) {\n                this.pickOption(option);\n            } else {\n                this.addOption({value: this.search});\n                this._addOptionCalled = true;\n                // we set this flag, so we can update ngModel with proper option,\n                // which will be generated on next digest cycle\n            }\n        }\n    }\n}\n\n/**\n * @ngdoc component\n * @name beforeOption\n */\n\n/**\n * @ngdoc component\n * @name optionTemplate\n */\n\n/**\n * @ngdoc component\n * @name extendedSelect\n *\n * @param {expression} ngModel\n * @param {expression|function} addOption\n * @param {expression|function} resolveOnSearch\n * @param {expression} deselectable\n * @param {expression|number} typeToSearch\n * @param {expression|boolean} searchByValue\n * @param {String} placeholder\n * @parma {String} multiple\n */\n\nexport const extendedSelectComponent: IComponentOptions = {\n    require: {\n        ngModelCtrl: 'ngModel'\n    },\n    bindings: {\n        ngModel: '=',\n        addOption: '&?',\n        resolveOnSearch: '&?',\n        deselectable: '<?',\n        deselectValue: '<?',\n        typeToSearch: '<?',\n        searchByValue: '<?'\n    },\n    transclude: {\n        option: '?option',\n        beforeOption: '?beforeOption',\n        optionTemplate: '?optionTemplate'\n    },\n    templateUrl: 'src/templates/extended-select.html',\n    controllerAs: 'ctrl',\n    controller: ExtendedSelectComponentController\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {ExtendedSelectComponentController} from './extended-select.component';\nimport * as angular from 'angular';\nimport {IComponentOptions} from 'angular';\n\nclass ExtendedSelectMarkResultComponentController {\n    extendedSelect: ExtendedSelectComponentController;\n    label: string;\n    private _search: string;\n\n    constructor(\n        private $element: JQLite\n    ) {\n    }\n\n    $doCheck(): void {\n        if (this.extendedSelect.search !== this._search) {\n            this._update();\n        }\n    }\n\n    $onChanges(): void {\n        this._update();\n    }\n\n    private _update() {\n        this._search = this.extendedSelect.search;\n        let html = this.label;\n        if (this.label && angular.isString(this._search) && this._search.length) {\n            html = this.label.replace(new RegExp('(' + this._search + ')', 'gi'), '<u>$1</u>')\n        }\n        this.$element.html(html);\n    }\n}\n\n/**\n * @ngdoc component\n * @name extendedSelectMarkResult\n * @param {expression} label\n */\nexport const extendedSelectMarkResultComponent: IComponentOptions = {\n    require: {\n        extendedSelect: '^extendedSelect'\n    },\n    bindings: {\n        label: '<'\n    },\n    controllerAs: 'vm',\n    controller: ExtendedSelectMarkResultComponentController\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\n\nimport {IGroupItem} from './extended-select.component';\nimport * as angular from 'angular';\nimport {IComponentOptions} from 'angular';\n\n/**\n * @ngInject\n */\nclass ExtendedSelectOptionGroupController {\n    // bindings\n    group: IGroupItem;\n    prevGroup: IGroupItem;\n    //\n    groups: IGroupItem[];\n\n    $onChanges(): void {\n        this.groups = [this.group];\n        let group = this.group;\n        while (angular.isDefined(group.parent)) {\n            group = group.parent;\n            if (\n                angular.isDefined(this.prevGroup)\n            ) {\n                let commonAncestor = this.prevGroup;\n                if (commonAncestor.level > group.level) {\n                    commonAncestor = this.getUntilLevel(commonAncestor, group.level);\n                }\n                if (commonAncestor.name === group.name) {\n                    break;\n                }\n            }\n            this.groups.unshift(group);\n        }\n    }\n\n    getUntilLevel(group: IGroupItem, level: number): IGroupItem {\n        while (group.level > level) {\n            group = group.parent;\n        }\n        return group;\n    }\n}\nexport const extendedSelectOptionGroupComponent: IComponentOptions = {\n    controller: ExtendedSelectOptionGroupController,\n    controllerAs: 'vm',\n    bindings: {\n        group: '<',\n        prevGroup: '<'\n    },\n    template: '<h6 class=\"dropdown-header\" ng-repeat=\"group in vm.groups\" '\n        + 'ng-style=\"::{\\'padding-left\\': 10 + (group.level * 10) + \\'px\\'}\">{{::group.name}}</h6>'\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective} from 'angular';\nimport {AngularBSService} from 'angularjs-bootstrap-4';\n\n/**\n * @ngInject\n */\nclass ExtendedSelectOptionsDirectiveController {\n    activeIndex: number;\n\n    constructor(\n        private $element: JQLite,\n        private angularBS: AngularBSService\n    ) {\n    }\n\n    $onChanges(): void { // it's always an activeIndex change\n        const item = this.$element[0].querySelector(\n            `.dropdown-item:nth-child(${this.activeIndex + 1})`\n        ) as HTMLDivElement;\n        if (item === null) {\n            return;\n        }\n        const top = item.offsetTop,\n            scroll = this.$element[0].scrollTop,\n            bot = this.angularBS.offset(item).height + top,\n            ulHeight = this.angularBS.offset(this.$element[0]).height;\n        if (scroll - top > 0) { // move it up\n            this.$element[0].scrollTop = top;\n        } else if (scroll - bot < ulHeight * -1) { // move it down\n            this.$element[0].scrollTop = bot - ulHeight;\n        }\n    }\n}\n\nexport function extendedSelectOptionsDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name extendedSelectOptions\n     * @description automatically scroll dropdown window to highlighted option\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            activeIndex: '<extendedSelectOptions'\n        },\n        controller: ExtendedSelectOptionsDirectiveController\n    };\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport * as angular from 'angular';\nimport angularBS from 'angularjs-bootstrap-4';\nimport {ExtendedSelectProvider} from './extended-select.provider';\nimport {extendedSelectConfig} from './extended-select.config';\nimport {ExtendedSelectOptionsService} from './service/extended-select-options.service';\nimport {extendedSelectComponent} from './component/extended-select.component';\nimport {esTranscludeDirective} from './component/es-transclude.directive';\nimport {extendedSelectMarkResultComponent} from './component/extended-select-mark-result.component';\nimport {extendedSelectOptionGroupComponent} from './component/extended-select-option-group.component';\nimport {extendedSelectOptionsDirective} from './component/extended-select-options.directive';\nimport {extendedSelectSearchDirective} from './component/extended-select-search.directive';\n\nconst extendedSelectModule = angular.module('extendedSelect', [angularBS])\n    .provider('extendedSelect', ExtendedSelectProvider)\n    .config(extendedSelectConfig)\n    .factory('extendedSelectOptions', ExtendedSelectOptionsService)\n    .component('extendedSelect', extendedSelectComponent)\n    .directive('esTransclude', esTranscludeDirective)\n    .component('extendedSelectMarkResult', extendedSelectMarkResultComponent)\n    .component('extendedSelectOptionGroup', extendedSelectOptionGroupComponent)\n    .directive('extendedSelectOptions', extendedSelectOptionsDirective)\n    .directive('extendedSelectSearch', extendedSelectSearchDirective);\n\nexport const extendedSelect = extendedSelectModule.name;\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {extendedSelect} from './lib/extended-select.module';\nexport {ExtendedSelectOptionsService} from './lib/service/extended-select-options.service';\nexport {IExtendedSelectOptions} from './lib/extended-select.provider';\n\nexport default extendedSelect;\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nexport interface IExtendedSelectOptions {\n    placeholder: string,\n    placeholderMultiple: string,\n    typeToSearch: number,\n    typeToSearchText: string,\n    addOptionLang: string,\n    loadMoreResultsLang: string,\n    searchByValue: boolean\n}\n\nexport class ExtendedSelectProvider {\n    options: IExtendedSelectOptions = {\n        placeholder: '\\u00A0',\n        placeholderMultiple: '\\u00A0',\n        typeToSearch: 0,\n        typeToSearchText: 'Begin typing to display available options',\n        addOptionLang: 'Add',\n        loadMoreResultsLang: 'Load more results',\n        searchByValue: false\n    }\n\n    $get(): IExtendedSelectOptions {\n        return this.options;\n    }\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport IProvideService = angular.auto.IProvideService;\nimport * as angular from 'angular';\nimport {IDirective} from 'angular';\n\n/**\n * Prevent ng-options directive from compiling on angular-extended-select\n */\nexport function extendedSelectConfig($provide: IProvideService): void {\n    const blocked = ['ngOptions', 'select'];\n    angular.forEach(blocked, function(directiveName) {\n        $provide.decorator(directiveName + 'Directive', ['$delegate', function($delegate) {\n            angular.forEach($delegate, function(directive: IDirective) {\n                const compile_ = directive.compile || angular.noop;\n                directive.compile = function(element, attrs, transclude) {\n                    if (element[0].tagName === 'EXTENDED-SELECT') {\n                        directive.terminal = false;\n                        return;\n                    }\n                    return compile_.apply(this, [element, attrs, transclude]) || directive.link;\n                };\n            });\n            return $delegate;\n        }]);\n    });\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective, IScope} from 'angular';\nimport * as angular from 'angular';\nimport {ExtendedSelectComponentController, IExtendedSelectOption} from './extended-select.component';\n\ninterface IEsTranscludeScope extends IScope {\n    $extendedSelect: ExtendedSelectComponentController,\n    $option: IExtendedSelectOption,\n    $isOption: boolean\n}\n\nexport function esTranscludeDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name esTransclude\n     */\n    return {\n        restrict: 'A',\n        require: '^extendedSelect',\n        link: function(\n            scope,\n            element,\n            attrs,\n            ctrl: ExtendedSelectComponentController,\n            transclude\n        ) {\n            const slots = attrs['esTransclude'] ? [attrs['esTransclude']] : ['optionTemplate', 'beforeOption'];\n            slots.forEach((slot) => {\n                if (transclude.isSlotFilled(slot)) {\n                    transclude((clone, transcludedScope: IEsTranscludeScope) => {\n                        transcludedScope.$extendedSelect = ctrl;\n                        transcludedScope.$option = scope['o'];\n                        transcludedScope.$isOption = true;\n                        if (angular.isUndefined(scope['o'])) {\n                            transcludedScope.$isOption = false;\n                            if (ctrl.multiple) {\n                                transcludedScope.$option = {\n                                    value: scope['m'],\n                                    label: ctrl.getModelLabel(scope['m'])\n                                };\n                            } else {\n                                transcludedScope.$watch(() => {\n                                    return ctrl.ngModel;\n                                }, () => {\n                                    transcludedScope.$option = {\n                                        value: ctrl.ngModel,\n                                        label: ctrl.getModelLabel()\n                                    };\n                                });\n                            }\n                        }\n                        if (slot === 'optionTemplate') {\n                            element.contents().replaceWith(clone);\n                        } else {\n                            element.prepend(clone);\n                        }\n                    }, null, slot);\n                }\n            });\n        }\n    }\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport IInjectorService = angular.auto.IInjectorService;\nimport {IDirective} from 'angular';\nimport * as angular from 'angular';\n\nexport function extendedSelectSearchDirective($injector: IInjectorService): IDirective {\n    /**\n     * @ngdoc directive\n     * @name extendedSelectSearch\n     * @description search element\n     */\n    return {\n        restrict: 'A',\n        require: '^extendedSelect',\n        link: function(scope, element, attrs, ctrl) {\n            if ($injector.has('$animate')) {\n                ($injector.get('$animate') as angular.animate.IAnimateService).enabled(element, false);\n            }\n            element[0].focus();\n            /**\n             * move selection or pick an option on keydown\n             */\n            element.on('keydown', function(e) {\n                e.stopPropagation();\n                if (!ctrl.optionsFiltered.length) {\n                    if (e.which === 13) {\n                        ctrl.addOptionAction();\n                        ctrl.$scope.$apply();\n                    }\n                    return;\n                }\n                const originalIndex = ctrl.activeIndex;\n                switch (e.which) {\n                    case 40: // down\n                        do {\n                            ctrl.activeIndex++;\n                            if (ctrl.activeIndex >= ctrl.optionsFiltered.length) {\n                                ctrl.activeIndex = originalIndex;\n                                break;\n                            }\n                        } while (ctrl.multiple && ctrl.isSelected(ctrl.optionsFiltered[ctrl.activeIndex]));\n                        break;\n                    case 38: // up\n                        do {\n                            ctrl.activeIndex--;\n                            if (ctrl.activeIndex < 0) {\n                                ctrl.activeIndex = originalIndex;\n                                break;\n                            }\n                        } while (ctrl.multiple && ctrl.isSelected(ctrl.optionsFiltered[ctrl.activeIndex]));\n                        break;\n                    case 13: // enter\n                        if (angular.isDefined(ctrl.optionsFiltered[ctrl.activeIndex])) {\n                            ctrl.pickOption(ctrl.optionsFiltered[ctrl.activeIndex]);\n                            ctrl.$scope.$apply();\n                            return;\n                        }\n                        break;\n                }\n                ctrl.$scope.$digest();\n            });\n        }\n    };\n}\n"],"sourceRoot":""}