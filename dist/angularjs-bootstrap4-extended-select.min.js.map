{"version":3,"sources":["webpack://extendedSelect/webpack/universalModuleDefinition","webpack://extendedSelect/external \"angular\"","webpack://extendedSelect/external \"angularjs-bootstrap-4\"","webpack://extendedSelect/webpack/bootstrap","webpack://extendedSelect/webpack/runtime/compat get default export","webpack://extendedSelect/webpack/runtime/define property getters","webpack://extendedSelect/webpack/runtime/hasOwnProperty shorthand","webpack://extendedSelect/./src/ts/lib/extended-select.config.ts","webpack://extendedSelect/./.build/src/ts/lib/service/extended-select-options.service.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select.component.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select-mark-result.component.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select-option-group.component.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select-options.directive.ts","webpack://extendedSelect/./.build/src/ts/lib/component/extended-select-search.directive.ts","webpack://extendedSelect/./src/ts/lib/extended-select.module.ts","webpack://extendedSelect/../src/ts/angularjs-bootstrap4-extended-select.ts","webpack://extendedSelect/./src/ts/lib/extended-select.provider.ts","webpack://extendedSelect/./.build/src/ts/lib/component/es-transclude.directive.ts"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__734__","__WEBPACK_EXTERNAL_MODULE__635__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","extendedSelectConfig","$provide","directiveName","decorator","$delegate","directive","compile_","compile","element","attrs","transclude","tagName","apply","this","link","terminal","NG_OPTIONS_REGEXP","ExtendedSelectOptionsService","$parse","ngOptionsString","match","valueName","keyName","valueFn","displayFn","groupByFn","nestedByFn","valuesFn","getLocals","value","locals","ExtendedSelectComponentController","$element","$attrs","$scope","$timeout","$transclude","extendedSelectOptions","extendedSelect","options","optionsFiltered","activeIndex","search","_searchTimeout","_transcludedOptions","_ngOptions","parseNgOptions","multiple","placeholder","placeholderMultiple","deselectable","length","addOptionLang","loadMoreResultsLang","typeToSearchText","typeToSearch","searchByValue","ngModelCtrl","$isEmpty","clone","optionElement","push","label","textContent","$observe","isDisabled","isReadonly","isSmall","hasClass","isLarge","optionObjects","$parent","_optionObjects","updateOptions","groups","groupsTree","addGroup","groupName","parentGroup","groupItem","find","item","name","children","pickLater","forEach","optionObject","group","_addOptionCalled","parent","parentChildren","subItem","order","walkTree","branch","level","sort","b","indexOf","pickOption","filterData","wasOpen","isOpen","$setTouched","some","option","i","isSelected","newValue","removeValue","sorted","includes","ngModel","toLowerCase","page","hasNextPage","resolveOnSearch","timeout","_lastSearchValue","cancel","loading","response","_updateMultipleModel","$setViewValue","deselectValue","addOption","extendedSelectComponent","bindings","beforeOption","optionTemplate","template","controllerAs","controller","ExtendedSelectMarkResultComponentController","_search","_update","html","replace","RegExp","extendedSelectMarkResultComponent","extendedSelectOptionGroupComponent","prevGroup","commonAncestor","getUntilLevel","unshift","ExtendedSelectOptionsDirectiveController","angularBS","querySelector","top","offsetTop","scroll","scrollTop","bot","offset","height","ulHeight","extendedSelectSearchDirective","$injector","restrict","scope","ctrl","has","focus","on","e","stopPropagation","which","addOptionAction","$apply","originalIndex","$digest","slot","isSlotFilled","transcludedScope","$extendedSelect","$option","$isOption","getModelLabel","$watch","contents","replaceWith","prepend","bindToController"],"mappings":"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","file":"angularjs-bootstrap4-extended-select.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"angularjs-bootstrap-4\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angularjs-bootstrap4-extended-select\", [\"angular\", \"angularjs-bootstrap-4\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angularjs-bootstrap4-extended-select\"] = factory(require(\"angular\"), require(\"angularjs-bootstrap-4\"));\n\telse\n\t\troot[\"angularjs-bootstrap4-extended-select\"] = factory(root[\"angular\"], root[\"angularjs-bootstrap-4\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__734__, __WEBPACK_EXTERNAL_MODULE__635__) {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__734__;","module.exports = __WEBPACK_EXTERNAL_MODULE__635__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport IProvideService = angular.auto.IProvideService;\nimport * as angular from 'angular';\nimport {IDirective} from 'angular';\n\n/**\n * Prevent ng-options directive from compiling on angular-extended-select\n * @ngInject\n */\nexport function extendedSelectConfig($provide: IProvideService): void {\n    const blocked = ['ngOptions', 'select'];\n    angular.forEach(blocked, function(directiveName) {\n        $provide.decorator(directiveName + 'Directive', ['$delegate', function($delegate) {\n            angular.forEach($delegate, function(directive: IDirective) {\n                const compile_ = directive.compile || angular.noop;\n                directive.compile = function(element, attrs, transclude) {\n                    if (element[0].tagName === 'EXTENDED-SELECT') {\n                        directive.terminal = false;\n                        return;\n                    }\n                    return compile_.apply(this, [element, attrs, transclude]) || directive.link;\n                };\n            });\n            return $delegate;\n        }]);\n    });\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\nimport {ICompiledExpression, IParseService} from 'angular';\n\n/**\n * Parse ng-options in angular way.\n * 1: value expression (valueFn)\n * 2: label expression (displayFn)\n * 3: group by expression (groupByFn)\n * 4: nested by expression (nestedByFn)\n * 5: disable when expression (disableWhenFn)\n * 6: array item variable name\n * 7: object item key variable name\n * 8: object item value variable name\n * 9: collection expression\n * 10: track by expression\n * @type {RegExp}\n */\n// eslint-disable-next-line max-len\nconst NG_OPTIONS_REGEXP = /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?)(?:\\s+nested\\s+by\\s+([\\s\\S]+?))?)?(?:\\s+disable\\s+when\\s+([\\s\\S]+?))?\\s+for\\s+(?:([$\\w][$\\w]*)|(?:\\(\\s*([$\\w][$\\w]*)\\s*,\\s*([$\\w][$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/;\n\nexport interface IParsedNgOptions {\n    valueFn: ICompiledExpression,\n    displayFn: ICompiledExpression,\n    groupByFn: ICompiledExpression,\n    nestedByFn: ICompiledExpression,\n    valuesFn: ICompiledExpression,\n    getLocals: (key: unknown, value: unknown) => Record<string, unknown>\n}\n\n/**\n * @ngInject\n */\nexport class ExtendedSelectOptionsService {\n    constructor(\n        private $parse: IParseService\n    ) {\n    }\n\n    parseNgOptions(ngOptionsString: string): IParsedNgOptions {\n        const match = ngOptionsString.match(NG_OPTIONS_REGEXP);\n        if (match === null) {\n            return null;\n        }\n        const valueName = match[6] || match[8],\n            keyName = match[7];\n        return {\n            valueFn: this.$parse(match[2] ? match[1] : valueName),\n            displayFn: this.$parse(match[2] || match[1]),\n            groupByFn: this.$parse(match[3] || ''),\n            nestedByFn: this.$parse(match[4] || ''),\n            valuesFn: this.$parse(match[9]),\n            getLocals: (key, value) => {\n                const locals = {};\n                locals[valueName] = value;\n                if (keyName) {\n                    locals[keyName] = key;\n                }\n                return locals;\n            }\n        };\n    }\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {\n    IAttributes,\n    IComponentOptions,\n    INgModelController,\n    IPromise,\n    IScope,\n    ITimeoutService,\n    ITranscludeFunction\n} from 'angular';\nimport {ExtendedSelectOptionsService, IParsedNgOptions} from '../service/extended-select-options.service';\nimport {IExtendedSelectOptions} from '../extended-select.provider';\nimport * as angular from 'angular';\n\nexport interface IGroupItem {\n    name: string,\n    parentGroup: string,\n    children: IGroupItem[],\n    level?: number,\n    parent?: IGroupItem\n}\n\nexport interface IExtendedSelectOption {\n    value: unknown,\n    label: string,\n    group?: IGroupItem\n}\n\n/**\n * @ngInject\n */\nexport class ExtendedSelectComponentController {\n    // bindings\n    ngModel: unknown | unknown[];\n    addOption: (locals: { value: string }) => void;\n    resolveOnSearch: (locals: { value: string, page: number }) => IPromise<{ hasNextPage?: boolean }>;\n    deselectable: boolean;\n    deselectValue: unknown;\n    typeToSearch: number;\n    searchByValue: boolean;\n    ngModelCtrl: INgModelController;\n    //\n    options: IExtendedSelectOption[] = [];\n    optionsFiltered: IExtendedSelectOption[] = [];\n    activeIndex = -1;\n    search = '';\n    multiple: boolean;\n    addOptionLang: string;\n    loadMoreResultsLang: string;\n    typeToSearchText: string;\n    placeholder: string;\n    isDisabled: boolean;\n    isReadonly: boolean;\n    isSmall: boolean;\n    isLarge: boolean;\n    isOpen: boolean;\n    hasNextPage: boolean;\n    page: number;\n    loading: boolean;\n    private _ngOptions: IParsedNgOptions;\n    private _searchTimeout = null;\n    private _optionObjects: Record<string, unknown>[];\n    private _addOptionCalled: boolean;\n    private _lastSearchValue: string;\n    private _transcludedOptions: IExtendedSelectOption[] = [];\n\n    constructor(\n        private $element: JQLite,\n        private $attrs: IAttributes,\n        private $scope: IScope,\n        private $timeout: ITimeoutService,\n        private $transclude: ITranscludeFunction,\n        private extendedSelectOptions: ExtendedSelectOptionsService,\n        private extendedSelect: IExtendedSelectOptions\n    ) {\n        this._ngOptions = 'ngOptions' in $attrs\n            ? extendedSelectOptions.parseNgOptions($attrs['ngOptions']) : null;\n        this.multiple = 'multiple' in this.$attrs;\n        this.placeholder = 'multiple' in this.$attrs\n            ? this.extendedSelect.placeholderMultiple : this.extendedSelect.placeholder;\n    }\n\n    $onInit(): void {\n        if (!this.deselectable && 'deselectable' in this.$attrs && !this.$attrs.deselectable.length) {\n            this.deselectable = true;\n        }\n\n        this.addOptionLang = this.extendedSelect.addOptionLang;\n        this.loadMoreResultsLang = this.extendedSelect.loadMoreResultsLang;\n        this.typeToSearchText = this.extendedSelect.typeToSearchText;\n\n        if (angular.isUndefined(this.typeToSearch)) {\n            this.typeToSearch = this.extendedSelect.typeToSearch;\n        }\n        if (angular.isUndefined(this.searchByValue)) {\n            this.searchByValue = this.extendedSelect.searchByValue;\n        }\n        if (this.multiple) {\n            this.ngModelCtrl.$isEmpty = function(value) {\n                return !value || value.length === 0;\n            };\n        }\n        this._transcludedOptions = [];\n        this.$transclude((clone) => {\n            angular.forEach(clone, (optionElement: HTMLOptionElement) => {\n                this._transcludedOptions.push({\n                    value: optionElement.value,\n                    label: optionElement.textContent\n                });\n            });\n        }, null, 'option');\n        //\n        this.$attrs.$observe('placeholder', (value) => {\n            this.placeholder = value as string;\n        });\n        this.$attrs.$observe('disabled', (value) => {\n            this.isDisabled = value === true || angular.isString(value);\n        });\n        this.$attrs.$observe('readonly', (value) => {\n            this.isReadonly = value === true || angular.isString(value);\n        });\n    }\n\n    $doCheck(): void {\n        this.isSmall = this.$element.hasClass('custom-select-sm');\n        this.isLarge = this.$element.hasClass('custom-select-lg');\n        if (this._ngOptions !== null) {\n            const optionObjects = this._ngOptions.valuesFn(this.$scope.$parent);\n            if (angular.isDefined(optionObjects) && !angular.equals(optionObjects, this._optionObjects)) {\n                this._optionObjects = angular.copy(optionObjects);\n                this.updateOptions(optionObjects);\n            }\n        }\n    }\n\n    updateOptions(optionObjects: Record<string, unknown>[]): void {\n        const options = angular.copy(this._transcludedOptions),\n            groups = [],\n            groupsTree = [],\n            addGroup = (groupName: string, parentGroup?: string) => {\n                if (angular.isDefined(parentGroup)) {\n                    addGroup(parentGroup);\n                }\n                let groupItem = groups.find((item) => {\n                    return item.name === groupName;\n                });\n\n                if (angular.isUndefined(groupItem)) {\n                    groupItem = {\n                        name: groupName,\n                        parentGroup,\n                        children: []\n                    };\n                    groups.push(groupItem);\n                } else if (angular.isDefined(parentGroup) && groupItem.parentGroup !== parentGroup) {\n                    groupItem.parentGroup = parentGroup;\n                }\n\n                return groupItem;\n            };\n        let pickLater;\n\n        optionObjects.forEach((optionObject, key) => {\n            const locals = this._ngOptions.getLocals(key, optionObject),\n                groupName = this._ngOptions.groupByFn(this.$scope.$parent, locals),\n                parentGroup = this._ngOptions.nestedByFn(this.$scope.$parent, locals);\n\n            options.push({\n                value: this._ngOptions.valueFn(this.$scope.$parent, locals),\n                label: this._ngOptions.displayFn(this.$scope.$parent, locals),\n                group: angular.isDefined(groupName) ? addGroup(groupName, parentGroup) : undefined\n            });\n\n            if (this._addOptionCalled && options[options.length - 1].label === this.search) {\n                pickLater = options[options.length - 1];\n                this._addOptionCalled = false;\n            }\n        });\n\n        if (groups.length) {\n            groups.forEach((item) => {\n                let parent, parentChildren;\n                if (angular.isUndefined(item.parentGroup)) {\n                    parentChildren = groupsTree;\n                } else {\n                    parent = groups.find((subItem) => {\n                        return subItem.name === item.parentGroup;\n                    });\n                    parentChildren = parent.children;\n                }\n                item.parent = parent;\n                parentChildren.push(item);\n            });\n            const order = [],\n                walkTree = (branch: IGroupItem[], level = 0) => {\n                    branch.forEach((item) => {\n                        order.push(item.name);\n                        item.level = level;\n                        walkTree(item.children, level + 1);\n                    });\n                }\n            walkTree(groupsTree);\n            options.sort((a, b) => {\n                return order.indexOf(a.group.name) - order.indexOf(b.group.name);\n            });\n        }\n\n        this.options = options;\n        if (pickLater) {\n            // in multiple mode, we need to wait until new option is added to this.options\n            // before selecting it\n            this.pickOption(pickLater);\n        }\n        this.filterData();\n    }\n\n    open(): void {\n        const wasOpen = this.isOpen;\n        this.ngModelCtrl.$setTouched();\n        if (this.isDisabled || this.isReadonly) {\n            this.isOpen = false;\n        } else {\n            this.isOpen = this.multiple ? true : !this.isOpen;\n        }\n        if (!wasOpen && this.isOpen) {\n            this.search = '';\n            // reset active index\n            this.activeIndex = -1;\n            this.options.some((option, i) => {\n                if (this.isSelected(option)) {\n                    this.activeIndex = i;\n                    if (!this.multiple) {\n                        return true; // break;\n                    }\n                }\n            });\n            this.filterData();\n        }\n    }\n\n    _updateMultipleModel(newValue: unknown, removeValue?: unknown): void {\n        // sort selected options, so we get same result as in select element.\n        const sorted = [];\n        this.options.forEach((option) => {\n            if (\n                (\n                    this.isSelected(option)\n                    || angular.equals(option.value, newValue)\n                )\n                && !angular.equals(option.value, removeValue)\n                && !sorted.includes(option.value)\n            ) {\n                sorted.push(option.value);\n            }\n        });\n        if (!angular.equals(this.ngModel, sorted)) {\n            this.ngModel = sorted;\n        }\n    }\n\n    filterData(): void {\n        if (angular.isUndefined(this.search)) {\n            angular.copy(this.options, this.optionsFiltered);\n            return;\n        }\n        angular.copy([], this.optionsFiltered);\n        if (this.search.length < this.typeToSearch) {\n            return;\n        }\n        const search = this.search.toLowerCase();\n        this.options.forEach((option) => {\n            if (\n                option.label.toLowerCase().includes(search)\n                || (\n                    this.searchByValue\n                    && (\n                        (\n                            angular.isString(option.value)\n                            && option.value.toLowerCase().includes(search)\n                        )\n                        || (\n                            angular.isObject(option.value)\n                            && angular.toJson(option.value).toLowerCase().includes(search)\n                        )\n                    )\n                )\n            ) {\n                this.optionsFiltered.push(option);\n            }\n        });\n    }\n\n    isSelected(option: IExtendedSelectOption): boolean {\n        if (angular.isUndefined(this.ngModel)) {\n            return false;\n        }\n        if (this.multiple) {\n            return (this.ngModel as unknown[]).includes(option.value);\n        }\n        return angular.equals(option.value, this.ngModel);\n    }\n\n    getModelLabel(value?: unknown): string {\n        if (angular.isUndefined(value)) {\n            value = this.ngModel;\n        }\n        const option = this.options.find((option) => {\n            return angular.equals(option.value, value);\n        });\n        return option ? option.label : '';\n    }\n\n    searchFn(page?: number): void {\n        if (angular.isUndefined(page)) {\n            this.activeIndex = this.options.length ? 0 : -1;\n        }\n        this.hasNextPage = false;\n        this.filterData();\n        if (angular.isFunction(this.resolveOnSearch)) {\n            this.page = page || 1;\n            if (angular.isDefined(this.search) && this.search.length) {\n                const timeout = angular.isUndefined(this._lastSearchValue) ? 0 : 750;\n                if (this._searchTimeout !== null) {\n                    this.$timeout.cancel(this._searchTimeout);\n                }\n                this._lastSearchValue = this.search;\n                this.loading = true;\n                this._searchTimeout = this.$timeout(() => {\n                    this._searchTimeout = null;\n                    this.resolveOnSearch({value: this.search, page: this.page})\n                        .then((response) => {\n                            this._lastSearchValue = undefined;\n                            this.loading = false;\n                            this.hasNextPage = response && !!response.hasNextPage;\n                            this.filterData();\n                        }).catch(angular.noop);\n                }, timeout);\n            }\n        }\n    }\n\n    pickOption(option: IExtendedSelectOption): void {\n        if (this.multiple) {\n            if (angular.isUndefined(this.ngModel)) {\n                this.ngModel = [];\n            }\n            if (!(this.ngModel as unknown[]).includes(option.value)) {\n                this._updateMultipleModel(option.value);\n            }\n            this.activeIndex = -1;\n            this.search = '';\n        } else {\n            this.isOpen = false;\n            this.ngModel = option.value;\n            this.activeIndex = this.options.indexOf(option);\n        }\n        this.hasNextPage = false;\n        this.ngModelCtrl.$setViewValue(this.ngModel);\n    }\n\n    deselect(value: unknown): void {\n        if (this.multiple) {\n            this._updateMultipleModel(undefined, value);\n        } else {\n            this.ngModel = this.deselectValue;\n        }\n        this.activeIndex = -1;\n        this.ngModelCtrl.$setViewValue(this.ngModel);\n    }\n\n    addOptionAction(): void {\n        if (angular.isFunction(this.addOption) && this.search.length) {\n            const option = this.options.find((option) => {\n                return option.label === this.search;\n            });\n            if (option) {\n                this.pickOption(option);\n            } else {\n                this.addOption({value: this.search});\n                this._addOptionCalled = true;\n                // we set this flag, so we can update ngModel with proper option,\n                // which will be generated on next digest cycle\n            }\n        }\n    }\n}\n\n/**\n * @ngdoc component\n * @name beforeOption\n */\n\n/**\n * @ngdoc component\n * @name optionTemplate\n */\n\n/**\n * @ngdoc component\n * @name extendedSelect\n *\n * @param {expression} ngModel\n * @param {expression|function} addOption\n * @param {expression|function} resolveOnSearch\n * @param {expression} deselectable\n * @param {expression|number} typeToSearch\n * @param {expression|boolean} searchByValue\n * @param {String} placeholder\n * @parma {String} multiple\n */\n\nexport const extendedSelectComponent: IComponentOptions = {\n    require: {\n        ngModelCtrl: 'ngModel'\n    },\n    bindings: {\n        ngModel: '=',\n        addOption: '&?',\n        resolveOnSearch: '&?',\n        deselectable: '<?',\n        deselectValue: '<?',\n        typeToSearch: '<?',\n        searchByValue: '<?'\n    },\n    transclude: {\n        option: '?option',\n        beforeOption: '?beforeOption',\n        optionTemplate: '?optionTemplate'\n    },\n    templateUrl: 'src/templates/extended-select.html',\n    controllerAs: 'ctrl',\n    controller: ExtendedSelectComponentController\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {ExtendedSelectComponentController} from './extended-select.component';\nimport * as angular from 'angular';\nimport {IComponentOptions} from 'angular';\n\n/**\n * @ngInject\n */\nclass ExtendedSelectMarkResultComponentController {\n    extendedSelect: ExtendedSelectComponentController;\n    label: string;\n    private _search: string;\n\n    constructor(\n        private $element: JQLite\n    ) {\n    }\n\n    $doCheck(): void {\n        if (this.extendedSelect.search !== this._search) {\n            this._update();\n        }\n    }\n\n    $onChanges(): void {\n        this._update();\n    }\n\n    private _update() {\n        this._search = this.extendedSelect.search;\n        let html = this.label;\n        if (this.label && angular.isString(this._search) && this._search.length) {\n            html = this.label.replace(new RegExp('(' + this._search + ')', 'gi'), '<u>$1</u>')\n        }\n        this.$element.html(html);\n    }\n}\n\n/**\n * @ngdoc component\n * @name extendedSelectMarkResult\n * @param {expression} label\n */\nexport const extendedSelectMarkResultComponent: IComponentOptions = {\n    require: {\n        extendedSelect: '^extendedSelect'\n    },\n    bindings: {\n        label: '<'\n    },\n    controllerAs: 'vm',\n    controller: ExtendedSelectMarkResultComponentController\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\n\nimport {IGroupItem} from './extended-select.component';\nimport * as angular from 'angular';\nimport {IComponentOptions} from 'angular';\n\n/**\n * @ngInject\n */\nclass ExtendedSelectOptionGroupController {\n    // bindings\n    group: IGroupItem;\n    prevGroup: IGroupItem;\n    //\n    groups: IGroupItem[];\n\n    $onChanges(): void {\n        this.groups = [this.group];\n        let group = this.group;\n        while (angular.isDefined(group.parent)) {\n            group = group.parent;\n            if (\n                angular.isDefined(this.prevGroup)\n            ) {\n                let commonAncestor = this.prevGroup;\n                if (commonAncestor.level > group.level) {\n                    commonAncestor = this.getUntilLevel(commonAncestor, group.level);\n                }\n                if (commonAncestor.name === group.name) {\n                    break;\n                }\n            }\n            this.groups.unshift(group);\n        }\n    }\n\n    getUntilLevel(group: IGroupItem, level: number): IGroupItem {\n        while (group.level > level) {\n            group = group.parent;\n        }\n        return group;\n    }\n}\nexport const extendedSelectOptionGroupComponent: IComponentOptions = {\n    controller: ExtendedSelectOptionGroupController,\n    controllerAs: 'vm',\n    bindings: {\n        group: '<',\n        prevGroup: '<'\n    },\n    template: '<h6 class=\"dropdown-header\" ng-repeat=\"group in vm.groups\" '\n        + 'ng-style=\"::{\\'padding-left\\': 10 + (group.level * 10) + \\'px\\'}\">{{::group.name}}</h6>'\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective} from 'angular';\nimport {AngularBSService} from 'angularjs-bootstrap-4';\n\n/**\n * @ngInject\n */\nclass ExtendedSelectOptionsDirectiveController {\n    activeIndex: number;\n\n    constructor(\n        private $element: JQLite,\n        private angularBS: AngularBSService\n    ) {\n    }\n\n    $onChanges(): void { // it's always an activeIndex change\n        const item = this.$element[0].querySelector(\n            `.dropdown-item:nth-child(${this.activeIndex + 1})`\n        ) as HTMLDivElement;\n        if (item === null) {\n            return;\n        }\n        const top = item.offsetTop,\n            scroll = this.$element[0].scrollTop,\n            bot = this.angularBS.offset(item).height + top,\n            ulHeight = this.angularBS.offset(this.$element[0]).height;\n        if (scroll - top > 0) { // move it up\n            this.$element[0].scrollTop = top;\n        } else if (scroll - bot < ulHeight * -1) { // move it down\n            this.$element[0].scrollTop = bot - ulHeight;\n        }\n    }\n}\n\nexport function extendedSelectOptionsDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name extendedSelectOptions\n     * @description automatically scroll dropdown window to highlighted option\n     */\n    return {\n        restrict: 'A',\n        bindToController: {\n            activeIndex: '<extendedSelectOptions'\n        },\n        controller: ExtendedSelectOptionsDirectiveController\n    };\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport IInjectorService = angular.auto.IInjectorService;\nimport {IDirective} from 'angular';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nexport function extendedSelectSearchDirective($injector: IInjectorService): IDirective {\n    /**\n     * @ngdoc directive\n     * @name extendedSelectSearch\n     * @description search element\n     */\n    return {\n        restrict: 'A',\n        require: '^extendedSelect',\n        link: function(scope, element, attrs, ctrl) {\n            if ($injector.has('$animate')) {\n                ($injector.get('$animate') as angular.animate.IAnimateService).enabled(element, false);\n            }\n            element[0].focus();\n            /**\n             * move selection or pick an option on keydown\n             */\n            element.on('keydown', function(e) {\n                e.stopPropagation();\n                if (!ctrl.optionsFiltered.length) {\n                    if (e.which === 13) {\n                        ctrl.addOptionAction();\n                        ctrl.$scope.$apply();\n                    }\n                    return;\n                }\n                const originalIndex = ctrl.activeIndex;\n                switch (e.which) {\n                    case 40: // down\n                        do {\n                            ctrl.activeIndex++;\n                            if (ctrl.activeIndex >= ctrl.optionsFiltered.length) {\n                                ctrl.activeIndex = originalIndex;\n                                break;\n                            }\n                        } while (ctrl.multiple && ctrl.isSelected(ctrl.optionsFiltered[ctrl.activeIndex]));\n                        break;\n                    case 38: // up\n                        do {\n                            ctrl.activeIndex--;\n                            if (ctrl.activeIndex < 0) {\n                                ctrl.activeIndex = originalIndex;\n                                break;\n                            }\n                        } while (ctrl.multiple && ctrl.isSelected(ctrl.optionsFiltered[ctrl.activeIndex]));\n                        break;\n                    case 13: // enter\n                        if (angular.isDefined(ctrl.optionsFiltered[ctrl.activeIndex])) {\n                            ctrl.pickOption(ctrl.optionsFiltered[ctrl.activeIndex]);\n                            ctrl.$scope.$apply();\n                            return;\n                        }\n                        break;\n                }\n                ctrl.$scope.$digest();\n            });\n        }\n    };\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport * as angular from 'angular';\nimport angularBS from 'angularjs-bootstrap-4';\nimport {ExtendedSelectProvider} from './extended-select.provider';\nimport {extendedSelectConfig} from './extended-select.config';\nimport {ExtendedSelectOptionsService} from './service/extended-select-options.service';\nimport {extendedSelectComponent} from './component/extended-select.component';\nimport {esTranscludeDirective} from './component/es-transclude.directive';\nimport {extendedSelectMarkResultComponent} from './component/extended-select-mark-result.component';\nimport {extendedSelectOptionGroupComponent} from './component/extended-select-option-group.component';\nimport {extendedSelectOptionsDirective} from './component/extended-select-options.directive';\nimport {extendedSelectSearchDirective} from './component/extended-select-search.directive';\n\nconst extendedSelectModule = angular.module('extendedSelect', [angularBS])\n    .provider('extendedSelect', ExtendedSelectProvider)\n    .config(extendedSelectConfig)\n    .factory('extendedSelectOptions', ExtendedSelectOptionsService)\n    .component('extendedSelect', extendedSelectComponent)\n    .directive('esTransclude', esTranscludeDirective)\n    .component('extendedSelectMarkResult', extendedSelectMarkResultComponent)\n    .component('extendedSelectOptionGroup', extendedSelectOptionGroupComponent)\n    .directive('extendedSelectOptions', extendedSelectOptionsDirective)\n    .directive('extendedSelectSearch', extendedSelectSearchDirective);\n\nexport const extendedSelect = extendedSelectModule.name;\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {extendedSelect} from './lib/extended-select.module';\nexport {ExtendedSelectOptionsService} from './lib/service/extended-select-options.service';\nexport {IExtendedSelectOptions} from './lib/extended-select.provider';\n\nexport default extendedSelect;\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nexport interface IExtendedSelectOptions {\n    placeholder: string,\n    placeholderMultiple: string,\n    typeToSearch: number,\n    typeToSearchText: string,\n    addOptionLang: string,\n    loadMoreResultsLang: string,\n    searchByValue: boolean\n}\n\nexport class ExtendedSelectProvider {\n    options: IExtendedSelectOptions = {\n        placeholder: '\\u00A0',\n        placeholderMultiple: '\\u00A0',\n        typeToSearch: 0,\n        typeToSearchText: 'Begin typing to display available options',\n        addOptionLang: 'Add',\n        loadMoreResultsLang: 'Load more results',\n        searchByValue: false\n    }\n\n    $get(): IExtendedSelectOptions {\n        return this.options;\n    }\n}\n","/*\n * AngularJS extended select component.\n * Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n * License: MIT\n */\n\nimport {IDirective, IScope} from 'angular';\nimport * as angular from 'angular';\nimport {ExtendedSelectComponentController, IExtendedSelectOption} from './extended-select.component';\n\ninterface IEsTranscludeScope extends IScope {\n    $extendedSelect: ExtendedSelectComponentController,\n    $option: IExtendedSelectOption,\n    $isOption: boolean\n}\n\nexport function esTranscludeDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name esTransclude\n     */\n    return {\n        restrict: 'A',\n        require: '^extendedSelect',\n        link: function(\n            scope,\n            element,\n            attrs,\n            ctrl: ExtendedSelectComponentController,\n            transclude\n        ) {\n            const slots = attrs['esTransclude'] ? [attrs['esTransclude']] : ['optionTemplate', 'beforeOption'];\n            slots.forEach((slot) => {\n                if (transclude.isSlotFilled(slot)) {\n                    transclude((clone, transcludedScope: IEsTranscludeScope) => {\n                        transcludedScope.$extendedSelect = ctrl;\n                        transcludedScope.$option = scope['o'];\n                        transcludedScope.$isOption = true;\n                        if (angular.isUndefined(scope['o'])) {\n                            transcludedScope.$isOption = false;\n                            if (ctrl.multiple) {\n                                transcludedScope.$option = {\n                                    value: scope['m'],\n                                    label: ctrl.getModelLabel(scope['m'])\n                                };\n                            } else {\n                                transcludedScope.$watch(() => {\n                                    return ctrl.ngModel;\n                                }, () => {\n                                    transcludedScope.$option = {\n                                        value: ctrl.ngModel,\n                                        label: ctrl.getModelLabel()\n                                    };\n                                });\n                            }\n                        }\n                        if (slot === 'optionTemplate') {\n                            element.contents().replaceWith(clone);\n                        } else {\n                            element.prepend(clone);\n                        }\n                    }, null, slot);\n                }\n            });\n        }\n    }\n}\n"],"sourceRoot":""}